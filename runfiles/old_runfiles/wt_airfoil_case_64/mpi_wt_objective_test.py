import numpy as np
from kulfan import Kulfan, units
import copy

import pathlib
path_to_here = pathlib.Path(__file__).parent.resolve()
from xfoil_wrapper_noprint import run as run_xfoil

from mpi4py import MPI
comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

from wt_objective import airfoil_fitness

if __name__ == '__main__':
    import time
    t0 = time.time()
    # uc = [  0.18012772950355516 ,  0.21143122313032892 ,  0.195311866287166   ,  0.23352810499781987  ,  0.16254755814754618 ,  0.23025668627491913  ,  0.187539058010806   ,  0.21332181636370282 ]
    # lc = [ -0.16576627768809188 , -0.09095209780954126 , -0.15472642741822615 , -0.016731905514821323 , -0.17414219967742545 , -0.016082899251775015 , -0.10825946920719859 , -0.0640323323772265  ]
    import matplotlib.pyplot as plt
    airfoil_seeds = [
        [3.040459184728062092e-01, 3.865158898232732843e-01, 1.316538699269504120e-01 ,3.139820595993685348e-01 ,-2.593332834032758827e-01 ,-1.465580816167938449e-01 ,-4.868709152015524566e-01, 3.030523043601500155e-01],
        [2.436455855485705202e-01, 5.627052809097938812e-01, 1.841844605039789085e-01 ,3.441977319654409007e-01 ,-2.291428721230603649e-01 ,-1.068366555679247792e-01 ,-2.774852502080942251e-01, 3.132586099910192323e-01],
        [0.2582842270537095, 0.4964721246645798, 0.4164424621176747, 0.1283162779727833, -0.18249632250339975, -0.10285442470019068, -0.2121181921919981, -0.028062804283516544], 
        [0.31290305833533927, 0.6239560091498667, 0.2869251276695567, 0.155851021751614, -0.16440915101702022, -0.06228482555742836, -0.053733316694260354, -0.08199763002033604], 
        [0.3329419994325063, 0.4531283108891521, 0.19100435696532686, 0.3713945916320681, -0.2726977641554793, -0.13690611331345137, -0.17480782426185812, 0.3593549534020975], 
        [0.29346462560202047, 0.6719197080381355, 0.1884171370171132, 0.17849556885773868, -0.1900239042701718, 0.017104502539840704, -0.286483523439857, 0.1727818851586355], 
        [0.28599396521074205, 0.4517759665931979, 0.650271913701331, 0.3925278502259172, -0.09556733520894033, 0.03918743898023378, -0.26920180705324087, 0.06307571485156584], 
        [0.2675438930269315, 0.5056769589407191, 0.32954054900670027, 0.5800772361939914, -0.108209017193649, -0.28261317570630595, -0.009734310869193907, 0.3666942487785794], 
        [0.21992736711542105, 0.4727066448075762, 0.2651288933642637, 0.25447476636261473, -0.1772887696188895, -0.19970550052166441, -0.25418140368037334, 0.002465847884309006], 
        [0.25556613516093873, 0.4755266815595478, 0.27585676097081774, 0.1743314180100867, -0.15904561236097559, -0.21539365915603478, -0.2211168030493814, 0.09525682662968278], 
        [0.27081066094103473, 0.62959607805191, 0.08700628670689836, 0.21703367041754748, -0.15749144080366081, -0.20499527697684483, 0.008188326707556924, -0.059554182524273476], 
        [0.2553375379991282, 0.473381974327063, 0.1249223047410003, 0.3290861584006977, -0.2093874463257601, -0.3296545574680625, 0.0012197855275171913, 0.24543567371477767], 
        [0.2610193078567949, 0.5267922969808392, 0.24757697190183187, 0.2041020748577004, -0.16783842020330567, -0.19193184472640137, -0.1843528586643609, 0.22241717079511478], 
        [0.2499406284719486, 0.39748395120532026, 0.5915582804128684, 0.46440903628038543, -0.08166235531360594, -0.06329194820442462, -0.3233030532545983, 0.2440828462152848], 
        [0.2329784374754877, 0.45272348923795785, 0.21270689928236394, 0.5249498780762653, -0.12064163565682151, -0.4484203292806439, 0.09710477633102109, 0.25955230201449664], 
        [0.18753003753461087, 0.41069337451188326, 0.21983351401576798, 0.24210575260930806, -0.1566791428342513, -0.368078838250043, -0.1813557284819381, 0.10066715845851065], 
        [0.2394425566499811, 0.41360526375167606, 0.19860170465821309, 0.18320056932566012, -0.17084755042994115, -0.35229595999351165, -0.15951195113375502, 0.20412988601689647], 
        [0.23710770637394243, 0.5338279639338933, 0.08715111228818721, 0.19011167964493558, -0.17080324914375833, -0.29844868042244976, -0.058986137113031176, 0.021233384481985425], 
        [0.2509142820255773, 0.37345505826378195, 0.15488314143254178, 0.27825009326235234, -0.22683321474826654, -0.4124216314233215, 0.022587527352588087, 0.2129417135581135], 
        [0.23079553809254766, 0.44767036898768464, 0.21391031577010675, 0.17144800537939536, -0.16317270933962846, -0.33856118215513836, -0.12834257559764148, 0.18480203624012911], 
        [0.21936214011419675, 0.4427775539743697, 0.34747529509407826, 0.47347201855091814, -0.07466057971254791, -0.2522584065109895, -0.2779749773409136, 0.34838687434048254], 
        [0.19420961528485134, 0.36192304367570727, 0.220105446641145, 0.23981900268378784, -0.237798691934023, -0.32400169188531125, -0.27100517500915217, 0.27118964024251463], 
        [0.24537359458931285, 0.3514502825604074, 0.18455333929427772, 0.1920126038494438, -0.21187300618811988, -0.3651219975620303, -0.18746319306862572, 0.21208366716052957], 
        [0.20960983516954657, 0.46325236038615003, 0.07513685709476811, 0.18642220336264997, -0.1675596434426419, -0.37439675821347085, -0.1362778982809343, 0.13146136144452375], 
        [0.24674426094896376, 0.29762168581993237, 0.17438657760993273, 0.2506067463583248, -0.23781008280912913, -0.4888692005447643, 0.05791570437065969, 0.14557331747594351], 
        [0.19964725740170258, 0.40692925045895806, 0.1933035941177082, 0.22452296753678058, -0.17787217188134308, -0.3745152838032301, -0.15835169652909079, 0.22679664273845085], 
        [0.19805494237909288, 0.39985891008051355, 0.14733821650746004, 0.40516805681589974, -0.15288084905679666, -0.5091455735346485, 0.05171086122559399, 0.0943423901714786], 
        [0.17950708944591395, 0.36133770190956865, 0.16216974965138334, 0.3572835382373481, -0.22022265507141378, -0.5296961230757076, 0.12046239072494991, 0.038155951411523795], 
        [0.19420961528485134, 0.36192304367570727, 0.220105446641145, 0.23981900268378784, -0.237798691934023, -0.32400169188531125, -0.27100517500915217, 0.27118964024251463], 
        [0.2456416211979799, 0.33152674801774035, 0.1792846282795539, 0.18297844221967985, -0.22708381487751522, -0.3687121920927408, -0.19714333658661928, 0.20270398410491855], 
        [0.18874331971280253, 0.42414983621917346, 0.0528986533141067, 0.23604854122003022, -0.17255218344909015, -0.41576599643692586, -0.18501146231554388, 0.16264544147571997], 
        [0.17818660926571406, 0.3392177200832282, 0.15674224845695414, 0.338915378867226, -0.23350833872981797, -0.5301449598549878, 0.08358642365774673, 0.0364064139789972], 
        [0.19363372910720608, 0.31737341111692774, 0.15070264550476414, 0.21846562565200386, -0.21160159112061672, -0.4680414909201987, -0.11437427367328515, 0.10217492656057549], 
        [0.2752609738762935, 0.2990720288809571, 0.18848683467688193, 0.18390545352110557, -0.2430337676496377, -0.3436770116967327, -0.2149624853210175, 0.18589757126963277], 
        [0.16998738500837796, 0.38873789347797544, 0.0108958731664555, 0.25567262057367973, -0.17738358325096168, -0.5062452212848755, -0.12551243603225676, 0.1807584155465429], 
        [0.27245471080018124, 0.29482642978426665, 0.15766094918198184, 0.18531745247448314, -0.28201781748494653, -0.30673126888716395, -0.2557459849930887, 0.18093904694575147], 
        [0.3011865493117533, 0.2772411631740817, 0.18653072002977394, 0.18016919239858728, -0.31267326730279543, -0.24556832772086037, -0.29990660609380754, 0.20264272599736138], 
        [0.24195233592370835, 0.27715608641584577, 0.1460051431244003, 0.19306537445619168, -0.2109948788745127, -0.535774958742598, 0.020178767725184087, 0.11237520537487637], 
    ]

    labels = [
        'pid',
        'obj',
        'con_tag',
        'alpha_design',
        'LoD_clean_at_design',
        'LoD_rough_at_design',
        'stall_margin_clean',
        'stall_margin_rough',
        'lift_margin_clean',
        'delta_cl_from_roughness',
        'LoD_c_1d_left',
        'LoD_c_1d_right',
        'tau',
        'ler_upper' ,
        'ler_lower',
        'Ixx',
        'Iyy',
        'Izz',
        'A',
        'con_sm_clean',
        'con_sm_rough',
        'con_ixx',
        'con_iyy',
        'con_izz',
        'con_a',
        'con_leru',
        'con_lerl',
        'con_te_cone',
        'con_max_tau',
        'con_max_tau_u',
        'con_max_tau_l',
        'con_ler_skew',
        'con_tau',
        'con_concave',
        'con_lower_flips',
        'con_flare_out',
    ]


    size = comm.Get_size()
    rank = comm.Get_rank()

    results = []
    for i in range(0,len(airfoil_seeds)):
        if i%size == rank:
            ins = {}
            ins['pid'] = i
            ins['individual'] = airfoil_seeds[i]
            ins['tau'] = 0.30
            # print(ins)
            results.append(airfoil_fitness(ins))
            # results.append(i)

    results = comm.gather(results, root=0)

    if rank == 0:
        for result in results:
            for subres in result:
                for ii,r in enumerate(subres):
                    print(labels[ii].ljust(30),': ',r)
                print()




# mpirun -n 8 python -m mpi4py mpi_wt_objective_test.py


