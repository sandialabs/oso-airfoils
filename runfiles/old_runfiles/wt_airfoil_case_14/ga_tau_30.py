# from wt_objective_fast import airfoil_fitness
# from wt_objective_updated import airfoil_fitness

# from wt_objective_equal import airfoil_fitness
# from wt_objective_4_1 import airfoil_fitness
from wt_objective_fullRough import airfoil_fitness
# from wt_objective_equal_12 import airfoil_fitness
# from wt_objective_4_1_12 import airfoil_fitness
# from wt_objective_fullRough_12 import airfoil_fitness
# from wt_objective_equal_14 import airfoil_fitness
# from wt_objective_4_1_14 import airfoil_fitness
# from wt_objective_fullRough_14 import airfoil_fitness
# from wt_objective_4_1_mingap import airfoil_fitness

from ga_new_generation_mpi import newGeneration
import random
from kulfan import Kulfan
import numpy as np
import subprocess
import time
import os
import sys
import copy

import pathlib
path_to_here = pathlib.Path(__file__).parent.resolve()

from mpi4py import MPI
comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

def cprint(x):
    sys.stdout.flush()
    print(x)

# mpirun -n 12 python -m mpi4py run_ga_mpi.py

# tau = 0.15
# tau = 0.18
# tau = 0.21
# tau = 0.24
# tau = 0.27
tau = 0.30
# tau = 0.33
# tau = 0.36

case_number = 14

N_k = 8
N_pop = 260

if 'dcmania' in str(path_to_here):
    ldr = '/gpfs/dcmania/'
elif 'ahsieh' in str(path_to_here):
    ldr = '/gpfs/ahsieh/'
elif 'karch' in str(path_to_here):
    ldr = './'
else:
    # Default to David's file system
    ldr = '/gpfs/dcmania/'

te_gap_lookup = {
    '15':  0.00196,
    '18':  0.00230,
    '21':  0.00262,
    '24':  0.00751,
    '27':  0.01012,
    '30':  0.01828,
    '33':  0.02644,
    '36':  0.02896,
}

pop = None 

airfoil_seeds = [
    [0.368977467219585, 0.7092458923779712, 0.5949178030252497, 0.18330896853254758, -0.26070903214771396, -0.14693489242884383, -0.3030259888457116, -0.040089720405023635], 
    [0.44700436905048463, 0.8913657273569524, 0.40989303952793815, 0.22264431678802, -0.23487021573860029, -0.08897832222489765, -0.07676188099180051, -0.1171394714576229], 
    [0.4756314277607232, 0.6473261584130744, 0.27286336709332404, 0.5305637023315258, -0.3895682345078275, -0.1955801618763591, -0.24972546323122585, 0.5133642191458535], 
    [0.41923517943145777, 0.9598852971973364, 0.269167338595876, 0.2549936697967695, -0.2714627203859597, 0.024435003628343856, -0.40926217634265283, 0.24683126451233636], 
    [0.40856280744391726, 0.6453942379902827, 0.9289598767161871, 0.5607540717513103, -0.13652476458420046, 0.05598205568604826, -0.38457401007605835, 0.09010816407366548], 
    [0.382205561467045, 0.7223956556295986, 0.47077221286671467, 0.8286817659914163, -0.15458431027664143, -0.4037331081518657, -0.013906158384562725, 0.523848926826542], 
    [0.31418195302203, 0.6752952068679658, 0.3787555619489481, 0.36353538051802103, -0.25326967088412783, -0.28529357217380624, -0.36311629097196185, 0.003522639834727151], 
    [0.36509447880134105, 0.679323830799354, 0.3940810871011682, 0.24904488287155244, -0.22720801765853657, -0.307705227365764, -0.315881147213402, 0.13608118089954682], 
    [0.3868723727729068, 0.8994229686455858, 0.1242946952955691, 0.31004810059649646, -0.22498777257665833, -0.2928503956812069, 0.011697609582224178, -0.08507740360610497], 
    [0.36476791142732595, 0.6762599633243758, 0.17846043534428616, 0.4701230834295682, -0.29912492332251445, -0.47093508209723217, 0.0017425507535959877, 0.350622391021111], 
    [0.372884725509707, 0.7525604242583417, 0.3536813884311884, 0.2915743926538577, -0.23976917171900813, -0.27418834960914484, -0.26336122666337275, 0.31773881542159255], 
    [0.3570580406742123, 0.5678342160076004, 0.8450832577326692, 0.6634414804005507, -0.11666050759086564, -0.09041706886346375, -0.4618615046494262, 0.34868978030754977], 
    [0.3328263392506967, 0.6467478417685112, 0.3038669989748056, 0.7499283972518075, -0.1723451937954593, -0.6406004704009199, 0.13872110904431584, 0.3707890028778523], 
    [0.26790005362087266, 0.5867048207312617, 0.3140478771653828, 0.34586536087044006, -0.22382734690607325, -0.5258269117857757, -0.2590796121170544, 0.1438102263693009], 
    [0.3420607952142587, 0.5908646625023943, 0.28371672094030437, 0.2617150990366573, -0.24406792918563022, -0.5032799428478738, -0.2278742159053643, 0.29161412288128064], 
    [0.33872529481991775, 0.762611377048419, 0.12450158898312458, 0.2715881137784794, -0.24400464163394045, -0.42635525774635674, -0.0842659101614731, 0.03033340640283632], 
    [0.35844897432225326, 0.533507226091117, 0.2212616306179168, 0.39750013323193184, -0.32404744964038074, -0.5891737591761734, 0.032267896217982976, 0.30420244794016216], 
    [0.3297079115607824, 0.6395290985538352, 0.3055861653858668, 0.2449257219705648, -0.23310387048518352, -0.4836588316501977, -0.18334653656805924, 0.26400290891447015], 
    [0.3133744858774239, 0.6325393628205281, 0.49639327870582606, 0.676388597929883, -0.10665797101792558, -0.36036915215855647, -0.39710711048701935, 0.4976955347721179], 
    [0.27744230754978766, 0.5170329195367247, 0.31443635234449285, 0.3425985752625541, -0.3397124170486043, -0.46285955983615895, -0.38715025001307457, 0.38741377177502095], 
    [0.35053370655616123, 0.5020718322291534, 0.2636476275632539, 0.2743037197849197, -0.30267572312588553, -0.5216028536600432, -0.2678045615266082, 0.3029766673721851], 
    [0.2994426216707808, 0.6617890862659286, 0.10733836727824016, 0.26631743337521424, -0.23937091920377415, -0.5348525117335298, -0.19468271182990615, 0.1878019449207482], 
    [0.35249180135566255, 0.4251738368856177, 0.2491236822999039, 0.3580096376547497, -0.33972868972732734, -0.6983845722068062, 0.08273672052951385, 0.20796188210849076], 
    [0.285210367716718, 0.5813275006556543, 0.276147991596726, 0.3207470964811151, -0.254103102687633, -0.5350218340046144, -0.22621670932727256, 0.32399520391207265], 
    [0.28293563197013266, 0.5712270144007336, 0.21048316643922863, 0.5788115097369996, -0.21840121293828094, -0.7273508193352122, 0.07387265889370569, 0.13477484310211227], 
    [0.2564386992084485, 0.5161967170136695, 0.23167107093054765, 0.510405054624783, -0.3146037929591625, -0.7567087472510109, 0.1720891296070713, 0.05450850201646257], 
    [0.27744230754978766, 0.5170329195367247, 0.31443635234449285, 0.3425985752625541, -0.3397124170486043, -0.46285955983615895, -0.38715025001307457, 0.38741377177502095], 
    [0.3509166017113998, 0.47360964002534334, 0.2561208975422199, 0.2613977745995426, -0.32440544982502173, -0.5267317029896298, -0.2816333379808847, 0.2895771201498836], 
    [0.2696333138754322, 0.6059283374559621, 0.07556950473443814, 0.3372122017429003, -0.2465031192129859, -0.5939514234813226, -0.26430208902220553, 0.2323506306795999], 
    [0.25455229895102005, 0.4845967429760403, 0.2239174977956488, 0.48416482695318, -0.3335833410425971, -0.7573499426499826, 0.1194091766539239, 0.05200916282713887], 
    [0.2766196130102944, 0.45339058730989684, 0.2152894935782345, 0.3120937509314341, -0.30228798731516676, -0.6686307013145696, -0.1633918195332645, 0.14596418080082213], 
    [0.39322996268041926, 0.4272457555442244, 0.2692669066812599, 0.26272207645872225, -0.3471910966423396, -0.49096715956676107, -0.30708926474431075, 0.2655679589566183], 
    [0.24283912144053993, 0.5553398478256792, 0.01556553309493643, 0.3652466008195425, -0.25340511892994527, -0.7232074589783936, -0.1793034800460811, 0.2582263079236327], 
    [0.3892210154288304, 0.4211806139775238, 0.22522992740283124, 0.2647392178206902, -0.4028825964070665, -0.4381875269816628, -0.36535140713298386, 0.258484352779645], 
    [0.4302664990167904, 0.39605880453440245, 0.2664724571853913, 0.2573845605694104, -0.44667609614685055, -0.3508118967440862, -0.4284380087054393, 0.2894896085676591], 
    [0.3456461941767262, 0.3959372663083511, 0.20857877589200044, 0.27580767779455956, -0.30142125553501814, -0.7653927982037113, 0.02882681103597727, 0.16053600767839482], 
]

if N_pop < len(airfoil_seeds):
    raise ValueError("Length of Population must be greater than the length of the seed population")

if N_k < 4:
    raise ValueError("Must use at least 2 design variables top and bottom")

if rank == 0:
    pop = airfoil_seeds 
    for i in range(0,N_pop-len(pop)): 
        pop += [[random.uniform(0.1,0.8)] + [random.uniform(-0.1,0.8) for j in range(0,int(N_k/2)-1)]   +   [random.uniform(-0.8,-0.1)] + [random.uniform(-0.8,0.1) for j in range(0,int(N_k/2)-1)] ] 

    for i,p in enumerate(pop):
        afl = Kulfan(TE_gap = te_gap_lookup[str(int(100*tau))])
        # afl = Kulfan(TE_gap = 0)
        K = p
        Ku = K[0:int(len(K)/2)]
        Kl = K[int(len(K)/2):]
        afl.upperCoefficients = Ku
        afl.lowerCoefficients = Kl
        afl.scaleThickness(tau)
        pop[i] = afl.upperCoefficients.magnitude.tolist() + afl.lowerCoefficients.magnitude.tolist()

pop = comm.bcast(pop, root=0)
pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=True, comm=comm)
pop = comm.bcast(pop, root=0)

if rank == 0:
    datestr = time.strftime("%d_%b_%Y_%H-%M", time.localtime())
    folderstr = datestr + '__tau_%d'%(100*tau) + '__case_%d'%(case_number)
    # ldr = '/gpfs/cjkarch/'
    if not os.path.isdir(ldr + folderstr):
        os.mkdir(ldr + folderstr) 
    np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g0.txt'%(int(100*tau),N_k,N_pop),np.array(pop))
    # save population

for i in range(0,200):
    if rank == 0:
        cprint('Generation %d'%(i))
        pop_cache = copy.deepcopy(pop)
    pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=False, comm=comm)
    pop = comm.bcast(pop, root=0)
    if rank == 0:
        if len(pop) == 0:
            pop = pop_cache
            pop = comm.bcast(pop, root=0)
        cprint(pop)
        np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g%d.txt'%(int(100*tau),N_k,N_pop,i),np.array(pop))
        # save population
