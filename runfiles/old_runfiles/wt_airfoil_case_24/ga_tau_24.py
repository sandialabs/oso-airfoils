# from wt_objective_fast import airfoil_fitness
# from wt_objective_updated import airfoil_fitness

# from wt_objective_equal import airfoil_fitness
# from wt_objective_4_1 import airfoil_fitness
# from wt_objective_fullRough import airfoil_fitness
# from wt_objective_equal_12 import airfoil_fitness
# from wt_objective_4_1_12 import airfoil_fitness
# from wt_objective_fullRough_12 import airfoil_fitness
# from wt_objective_equal_14 import airfoil_fitness
# from wt_objective_4_1_14 import airfoil_fitness
# from wt_objective_fullRough_14 import airfoil_fitness
# from wt_objective_4_1_mingap import airfoil_fitness
from wt_objective_fullRough_mod import airfoil_fitness

from ga_new_generation_mpi import newGeneration
import random
from kulfan import Kulfan
import numpy as np
import subprocess
import time
import os
import sys
import copy

import pathlib
path_to_here = pathlib.Path(__file__).parent.resolve()

from mpi4py import MPI
comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

def cprint(x):
    sys.stdout.flush()
    print(x)

# mpirun -n 12 python -m mpi4py run_ga_mpi.py

# tau = 0.15
# tau = 0.18
# tau = 0.21
tau = 0.24
# tau = 0.27
# tau = 0.30
# tau = 0.33
# tau = 0.36

case_number = 24

N_k = 8
N_pop = 260

if 'dcmania' in str(path_to_here):
    ldr = '/gpfs/dcmania/'
elif 'ahsieh' in str(path_to_here):
    ldr = '/gpfs/ahsieh/'
elif 'karch' in str(path_to_here):
    ldr = './'
else:
    # Default to David's file system
    ldr = '/gpfs/dcmania/'

te_gap_lookup = {
    '15':  0.00196,
    '18':  0.00230,
    '21':  0.00262,
    '24':  0.00751,
    '27':  0.01012,
    '30':  0.01828,
    '33':  0.02644,
    '36':  0.02896,
}

pop = None 

airfoil_seeds = [
    [0.295181973775668, 0.567396713902377, 0.4759342424201997, 0.1466471748260381, -0.20856722571817116, -0.11754791394307508, -0.24242079107656928, -0.03207177632401891], 
    [0.3576034952403877, 0.7130925818855619, 0.3279144316223505, 0.178115453430416, -0.18789617259088023, -0.07118265777991813, -0.0614095047934404, -0.09371157716609833], 
    [0.38050514220857856, 0.5178609267304595, 0.21829069367465925, 0.4244509618652207, -0.311654587606262, -0.15646412950108726, -0.1997803705849807, 0.41069137531668276], 
    [0.3353881435451663, 0.7679082377578692, 0.21533387087670083, 0.20399493583741563, -0.21717017630876778, 0.01954800290267509, -0.3274097410741223, 0.19746501160986912], 
    [0.32685024595513373, 0.5163153903922262, 0.7431679013729496, 0.44860325740104817, -0.10921981166736036, 0.0447856445488386, -0.3076592080608467, 0.07208653125893237], 
    [0.305764449173636, 0.5779165245036789, 0.3766177702933718, 0.6629454127931331, -0.12366744822131315, -0.32298648652149253, -0.01112492670765018, 0.41907914146123365], 
    [0.251345562417624, 0.5402361654943728, 0.3030044495591585, 0.29082830441441687, -0.2026157367073023, -0.22823485773904503, -0.29049303277756955, 0.002818111867781721], 
    [0.2920755830410728, 0.5434590646394831, 0.31526486968093453, 0.19923590629724192, -0.18176641412682923, -0.24616418189261116, -0.25270491777072157, 0.10886494471963745], 
    [0.3094978982183254, 0.7195383749164685, 0.09943575623645527, 0.24803848047719712, -0.17999021806132665, -0.2342803165449655, 0.00935808766577934, -0.06806192288488397], 
    [0.2918143291418608, 0.5410079706595007, 0.14276834827542895, 0.3760984667436546, -0.23929993865801155, -0.3767480656777858, 0.0013940406028767902, 0.2804979128168888], 
    [0.2983077804077656, 0.6020483394066733, 0.2829451107449507, 0.23325951412308618, -0.19181533737520648, -0.21935067968731586, -0.2106889813306982, 0.25419105233727407], 
    [0.28564643253936983, 0.4542673728060803, 0.6760666061861353, 0.5307531843204406, -0.09332840607269251, -0.072333655090771, -0.36948920371954097, 0.2789518242460398], 
    [0.2662610714005574, 0.5173982734148089, 0.2430935991798445, 0.599942717801446, -0.13787615503636744, -0.512480376320736, 0.11097688723545267, 0.2966312023022819], 
    [0.21432004289669815, 0.4693638565850094, 0.25123830173230627, 0.2766922886963521, -0.1790618775248586, -0.42066152942862056, -0.20726368969364353, 0.11504818109544074], 
    [0.27364863617140694, 0.47269173000191544, 0.2269733767522435, 0.20937207922932582, -0.19525434334850417, -0.402623954278299, -0.18229937272429142, 0.2332912983050245], 
    [0.2709802358559342, 0.6100891016387353, 0.09960127118649967, 0.21727049102278354, -0.1952037133071524, -0.34108420619708546, -0.06741272812917849, 0.02426672512226906], 
    [0.2867591794578026, 0.4268057808728936, 0.17700930449433344, 0.31800010658554545, -0.25923795971230457, -0.47133900734093875, 0.02581431697438638, 0.2433619583521297], 
    [0.2637663292486259, 0.5116232788430682, 0.24446893230869343, 0.19594057757645184, -0.1864830963881468, -0.38692706532015814, -0.1466772292544474, 0.21120232713157613], 
    [0.25069958870193915, 0.5060314902564225, 0.3971146229646608, 0.5411108783439064, -0.08532637681434047, -0.28829532172684513, -0.3176856883896155, 0.39815642781769434], 
    [0.22195384603983012, 0.4136263356293798, 0.25154908187559427, 0.27407886021004324, -0.2717699336388834, -0.37028764786892715, -0.30972020001045963, 0.3099310174200167], 
    [0.28042696524492894, 0.4016574657833227, 0.2109181020506031, 0.21944297582793573, -0.24214057850070841, -0.41728228292803454, -0.21424364922128653, 0.24238133389774805], 
    [0.23955409733662464, 0.5294312690127428, 0.08587069382259212, 0.2130539467001714, -0.1914967353630193, -0.42788200938682386, -0.15574616946392492, 0.15024155593659858], 
    [0.28199344108453, 0.34013906950849415, 0.19929894583992314, 0.2864077101237998, -0.27178295178186185, -0.5587076577654448, 0.06618937642361107, 0.1663695056867926], 
    [0.22816829417337436, 0.46506200052452346, 0.22091839327738078, 0.25659767718489207, -0.20328248215010639, -0.4280174672036916, -0.18097336746181802, 0.2591961631296581], 
    [0.22634850557610614, 0.45698161152058697, 0.1683865331513829, 0.46304920778959974, -0.17472097035062478, -0.5818806554681698, 0.05909812711496456, 0.10781987448168982], 
    [0.20515095936675878, 0.4129573736109356, 0.18533685674443812, 0.4083240436998264, -0.25168303436733, -0.6053669978008087, 0.13767130368565703, 0.04360680161317005], 
    [0.22195384603983012, 0.4136263356293798, 0.25154908187559427, 0.27407886021004324, -0.2717699336388834, -0.37028764786892715, -0.30972020001045963, 0.3099310174200167], 
    [0.28073328136911985, 0.37888771202027466, 0.2048967180337759, 0.2091182196796341, -0.25952435986001743, -0.4213853623917038, -0.22530667038470775, 0.23166169611990692], 
    [0.21570665110034576, 0.48474266996476967, 0.060455603787550515, 0.26976976139432024, -0.19720249537038873, -0.47516113878505806, -0.21144167121776442, 0.18588050454367994], 
    [0.20364183916081605, 0.3876773943808322, 0.17913399823651902, 0.387331861562544, -0.26686667283407767, -0.605879954119986, 0.09552734132313911, 0.04160733026171109], 
    [0.22129569040823552, 0.36271246984791744, 0.1722315948625876, 0.24967500074514729, -0.2418303898521334, -0.5349045610516556, -0.1307134556266116, 0.1167713446406577], 
    [0.3145839701443354, 0.3417966044353795, 0.2154135253450079, 0.2101776611669778, -0.27775287731387166, -0.39277372765340884, -0.24567141179544857, 0.21245436716529462], 
    [0.19427129715243194, 0.4442718782605434, 0.012452426475949144, 0.292197280655634, -0.2027240951439562, -0.5785659671827148, -0.14344278403686486, 0.20658104633890617], 
    [0.3113768123430643, 0.3369444911820191, 0.18018394192226497, 0.21179137425655217, -0.3223060771256532, -0.3505500215853302, -0.2922811257063871, 0.20678748222371598], 
    [0.34421319921343235, 0.3168470436275219, 0.21317796574831305, 0.20590764845552828, -0.3573408769174804, -0.28064951739526894, -0.3427504069643514, 0.23159168685412726], 
    [0.276516955341381, 0.3167498130466809, 0.16686302071360035, 0.22064614223564763, -0.2411370044280145, -0.6123142385629691, 0.023061448828781812, 0.12842880614271585], 
]

if N_pop < len(airfoil_seeds):
    raise ValueError("Length of Population must be greater than the length of the seed population")

if N_k < 4:
    raise ValueError("Must use at least 2 design variables top and bottom")

if rank == 0:
    pop = airfoil_seeds 
    for i in range(0,N_pop-len(pop)): 
        pop += [[random.uniform(0.1,0.8)] + [random.uniform(-0.1,0.8) for j in range(0,int(N_k/2)-1)]   +   [random.uniform(-0.8,-0.1)] + [random.uniform(-0.8,0.1) for j in range(0,int(N_k/2)-1)] ] 

    for i,p in enumerate(pop):
        afl = Kulfan(TE_gap = te_gap_lookup[str(int(100*tau))])
        # afl = Kulfan(TE_gap = 0)
        K = p
        Ku = K[0:int(len(K)/2)]
        Kl = K[int(len(K)/2):]
        afl.upperCoefficients = Ku
        afl.lowerCoefficients = Kl
        afl.scaleThickness(tau)
        pop[i] = afl.upperCoefficients.magnitude.tolist() + afl.lowerCoefficients.magnitude.tolist()

pop = comm.bcast(pop, root=0)
pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=True, comm=comm)
pop = comm.bcast(pop, root=0)

if rank == 0:
    datestr = time.strftime("%d_%b_%Y_%H-%M", time.localtime())
    folderstr = datestr + '__tau_%d'%(100*tau) + '__case_%d'%(case_number)
    # ldr = '/gpfs/cjkarch/'
    if not os.path.isdir(ldr + folderstr):
        os.mkdir(ldr + folderstr) 
    np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g0.txt'%(int(100*tau),N_k,N_pop),np.array(pop))
    # save population

for i in range(0,200):
    if rank == 0:
        cprint('Generation %d'%(i))
        pop_cache = copy.deepcopy(pop)
    pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=False, comm=comm)
    pop = comm.bcast(pop, root=0)
    if rank == 0:
        if len(pop) == 0:
            pop = pop_cache
            pop = comm.bcast(pop, root=0)
        cprint(pop)
        np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g%d.txt'%(int(100*tau),N_k,N_pop,i),np.array(pop))
        # save population
