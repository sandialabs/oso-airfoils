# from wt_objective_fast import airfoil_fitness
# from wt_objective_updated import airfoil_fitness

# from wt_objective_equal import airfoil_fitness
# from wt_objective_4_1 import airfoil_fitness
# from wt_objective_fullRough import airfoil_fitness
# from wt_objective_equal_12 import airfoil_fitness
# from wt_objective_4_1_12 import airfoil_fitness
# from wt_objective_fullRough_12 import airfoil_fitness
# from wt_objective_equal_14 import airfoil_fitness
# from wt_objective_4_1_14 import airfoil_fitness
# from wt_objective_fullRough_14 import airfoil_fitness
# from wt_objective_4_1_mingap import airfoil_fitness
from wt_objective_equal_mod import airfoil_fitness
# from wt_objective_4_1_mod import airfoil_fitness

from ga_new_generation_mpi import newGeneration
import random
from kulfan import Kulfan
import numpy as np
import subprocess
import time
import os
import sys
import copy

import pathlib
path_to_here = pathlib.Path(__file__).parent.resolve()

from mpi4py import MPI
comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

def cprint(x):
    sys.stdout.flush()
    print(x)

# mpirun -n 12 python -m mpi4py run_ga_mpi.py

# tau = 0.15
# tau = 0.18
# tau = 0.21
# tau = 0.24
# tau = 0.27
# tau = 0.30
# tau = 0.33
tau = 0.36

case_number = 22

N_k = 8
N_pop = 260

if 'dcmania' in str(path_to_here):
    ldr = '/gpfs/dcmania/'
elif 'ahsieh' in str(path_to_here):
    ldr = '/gpfs/ahsieh/'
elif 'karch' in str(path_to_here):
    ldr = './'
else:
    # Default to David's file system
    ldr = '/gpfs/dcmania/'

te_gap_lookup = {
    '15':  0.00196,
    '18':  0.00230,
    '21':  0.00262,
    '24':  0.00751,
    '27':  0.01012,
    '30':  0.01828,
    '33':  0.02644,
    '36':  0.02896,
}

pop = None 

airfoil_seeds = [
    [0.442772960663502, 0.8510950708535654, 0.7139013636302995, 0.2199707622390571, -0.3128508385772567, -0.1763218709146126, -0.3636311866148539, -0.048107664486028365], 
    [0.5364052428605816, 1.0696388728283428, 0.49187164743352574, 0.26717318014562397, -0.2818442588863203, -0.10677398666987718, -0.0921142571901606, -0.1405673657491475], 
    [0.5707577133128678, 0.7767913900956893, 0.3274360405119889, 0.6366764427978311, -0.46748188140939306, -0.2346961942516309, -0.29967055587747105, 0.6160370629750243], 
    [0.5030822153177493, 1.1518623566368038, 0.32300080631505124, 0.3059924037561234, -0.3257552644631517, 0.02932200435401263, -0.4911146116111834, 0.29619751741480366], 
    [0.49027536893270063, 0.7744730855883393, 1.1147518520594244, 0.6729048861015723, -0.16382971750104056, 0.0671784668232579, -0.46148881209127, 0.10812979688839856], 
    [0.458646673760454, 0.8668747867555184, 0.5649266554400577, 0.9944181191896997, -0.18550117233196972, -0.48447972978223885, -0.016687390061475273, 0.6286187121918505], 
    [0.377018343626436, 0.8103542482415591, 0.45450667433873776, 0.43624245662162525, -0.3039236050609534, -0.34235228660856754, -0.43573954916635427, 0.004227167801672581], 
    [0.43811337456160926, 0.8151885969592247, 0.47289730452140183, 0.2988538594458629, -0.2726496211902439, -0.36924627283891676, -0.37905737665608236, 0.1632974170794562], 
    [0.4642468473274881, 1.0793075623747028, 0.1491536343546829, 0.3720577207157957, -0.26998532709198997, -0.35142047481744826, 0.014037131498669012, -0.10209288432732595], 
    [0.4377214937127911, 0.811511955989251, 0.2141525224131434, 0.5641477001154819, -0.3589499079870173, -0.5651220985166786, 0.0020910609043151853, 0.42074686922533316], 
    [0.44746167061164843, 0.9030725091100101, 0.42441766611742604, 0.3498892711846293, -0.28772300606280976, -0.3290260195309738, -0.3160334719960473, 0.3812865785059111], 
    [0.42846964880905475, 0.6814010592091204, 1.0140999092792031, 0.7961297764806609, -0.13999260910903877, -0.10850048263615648, -0.5542338055793113, 0.4184277363690597], 
    [0.39939160710083604, 0.7760974101222133, 0.3646403987697667, 0.899914076702169, -0.20681423255455114, -0.7687205644811038, 0.166465330853179, 0.4449468034534228], 
    [0.3214800643450472, 0.7040457848775141, 0.37685745259845943, 0.41503843304452814, -0.2685928162872879, -0.6309922941429309, -0.3108955345404653, 0.17257227164316113], 
    [0.41047295425711045, 0.7090375950028732, 0.3404600651283653, 0.31405811884398876, -0.2928815150227563, -0.6039359314174486, -0.27344905908643713, 0.3499369474575368], 
    [0.40647035378390134, 0.9151336524581029, 0.1494019067797495, 0.3259057365341753, -0.29280556996072854, -0.5116263092956281, -0.10111909219376772, 0.03640008768340359], 
    [0.4301387691867039, 0.6402086713093403, 0.26551395674150013, 0.47700015987831823, -0.38885693956845685, -0.7070085110114082, 0.03872147546157957, 0.36504293752819456], 
    [0.39564949387293885, 0.7674349182646023, 0.3667033984630401, 0.2939108663646778, -0.27972464458222024, -0.5803905979802372, -0.22001584388167109, 0.3168034906973642], 
    [0.3760493830529087, 0.7590472353846338, 0.5956719344469913, 0.8116663175158596, -0.1279895652215107, -0.43244298259026775, -0.47652853258442324, 0.5972346417265415], 
    [0.33293076905974517, 0.6204395034440696, 0.37732362281339143, 0.41111829031506486, -0.4076549004583251, -0.5554314718033907, -0.4645803000156894, 0.4648965261300251], 
    [0.4206404478673934, 0.602486198674984, 0.31637715307590464, 0.3291644637419036, -0.36321086775106265, -0.6259234243920518, -0.3213654738319298, 0.36357200084662206], 
    [0.359331146004937, 0.7941469035191143, 0.12880604073388818, 0.31958092005025707, -0.287245103044529, -0.6418230140802358, -0.23361925419588736, 0.22536233390489785], 
    [0.42299016162679504, 0.5102086042627413, 0.2989484187598847, 0.42961156518569965, -0.40767442767279277, -0.8380614866481674, 0.09928406463541661, 0.2495542585301889], 
    [0.34225244126006155, 0.6975930007867852, 0.33137758991607114, 0.38489651577733813, -0.30492372322515954, -0.6420262008055373, -0.27146005119272704, 0.38879424469448715], 
    [0.3395227583641592, 0.6854724172808804, 0.25257979972707434, 0.6945738116843996, -0.26208145552593715, -0.8728209832022547, 0.08864719067244684, 0.16172981172253473], 
    [0.3077264390501382, 0.6194360604164034, 0.2780052851166572, 0.6124860655497396, -0.377524551550995, -0.9080504967012131, 0.20650695552848555, 0.06541020241975508], 
    [0.33293076905974517, 0.6204395034440696, 0.37732362281339143, 0.41111829031506486, -0.4076549004583251, -0.5554314718033907, -0.4645803000156894, 0.4648965261300251], 
    [0.4210999220536798, 0.5683315680304121, 0.30734507705066383, 0.31367732951945115, -0.3892865397900261, -0.6320780435875557, -0.33796000557706163, 0.34749254417986036], 
    [0.32355997665051867, 0.7271140049471546, 0.09068340568132578, 0.4046546420914804, -0.2958037430555831, -0.7127417081775872, -0.31716250682664665, 0.27882075681551993], 
    [0.3054627587412241, 0.5815160915712483, 0.26870099735477854, 0.580997792343816, -0.40030000925111653, -0.9088199311799791, 0.14329101198470867, 0.062410995392566636], 
    [0.33194353561235324, 0.5440687047718761, 0.2583473922938814, 0.3745125011177209, -0.3627455847782, -0.8023568415774834, -0.1960701834399174, 0.17515701696098654], 
    [0.47187595521650316, 0.5126949066530693, 0.3231202880175119, 0.3152664917504667, -0.4166293159708075, -0.5891605914801133, -0.3685071176931729, 0.31868155074794197], 
    [0.2914069457286479, 0.666407817390815, 0.018678639713923716, 0.438295920983451, -0.3040861427159343, -0.8678489507740722, -0.2151641760552973, 0.30987156950835926], 
    [0.4670652185145964, 0.5054167367730286, 0.2702759128833975, 0.3176870613848283, -0.4834591156884797, -0.5258250323779953, -0.43842168855958064, 0.31018122333557396], 
    [0.5163197988201486, 0.47527056544128293, 0.3197669486224696, 0.30886147268329245, -0.5360113153762207, -0.4209742760929035, -0.5141256104465272, 0.3473875302811909], 
    [0.4147754330120715, 0.47512471957002134, 0.25029453107040056, 0.33096921335347146, -0.3617055066420218, -0.9184713578444537, 0.03459217324317272, 0.1926432092140738], 
]

if N_pop < len(airfoil_seeds):
    raise ValueError("Length of Population must be greater than the length of the seed population")

if N_k < 4:
    raise ValueError("Must use at least 2 design variables top and bottom")

if rank == 0:
    pop = airfoil_seeds 
    for i in range(0,N_pop-len(pop)): 
        pop += [[random.uniform(0.1,0.8)] + [random.uniform(-0.1,0.8) for j in range(0,int(N_k/2)-1)]   +   [random.uniform(-0.8,-0.1)] + [random.uniform(-0.8,0.1) for j in range(0,int(N_k/2)-1)] ] 

    for i,p in enumerate(pop):
        afl = Kulfan(TE_gap = te_gap_lookup[str(int(100*tau))])
        # afl = Kulfan(TE_gap = 0)
        K = p
        Ku = K[0:int(len(K)/2)]
        Kl = K[int(len(K)/2):]
        afl.upperCoefficients = Ku
        afl.lowerCoefficients = Kl
        afl.scaleThickness(tau)
        pop[i] = afl.upperCoefficients.magnitude.tolist() + afl.lowerCoefficients.magnitude.tolist()

pop = comm.bcast(pop, root=0)
pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=True, comm=comm)
pop = comm.bcast(pop, root=0)

if rank == 0:
    datestr = time.strftime("%d_%b_%Y_%H-%M", time.localtime())
    folderstr = datestr + '__tau_%d'%(100*tau) + '__case_%d'%(case_number)
    # ldr = '/gpfs/cjkarch/'
    if not os.path.isdir(ldr + folderstr):
        os.mkdir(ldr + folderstr) 
    np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g0.txt'%(int(100*tau),N_k,N_pop),np.array(pop))
    # save population

for i in range(0,200):
    if rank == 0:
        cprint('Generation %d'%(i))
        pop_cache = copy.deepcopy(pop)
    pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=False, comm=comm)
    pop = comm.bcast(pop, root=0)
    if rank == 0:
        if len(pop) == 0:
            pop = pop_cache
            pop = comm.bcast(pop, root=0)
        cprint(pop)
        np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g%d.txt'%(int(100*tau),N_k,N_pop,i),np.array(pop))
        # save population
