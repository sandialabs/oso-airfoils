# from wt_objective_fast import airfoil_fitness
# from wt_objective_updated import airfoil_fitness

# from wt_objective_equal import airfoil_fitness
# from wt_objective_4_1 import airfoil_fitness
# from wt_objective_fullRough import airfoil_fitness
# from wt_objective_equal_12 import airfoil_fitness
# from wt_objective_4_1_12 import airfoil_fitness
# from wt_objective_fullRough_12 import airfoil_fitness
# from wt_objective_equal_14 import airfoil_fitness
# from wt_objective_4_1_14 import airfoil_fitness
# from wt_objective_fullRough_14 import airfoil_fitness
# from wt_objective_4_1_mingap import airfoil_fitness
from wt_objective_equal_mod import airfoil_fitness
# from wt_objective_4_1_mod import airfoil_fitness

from ga_new_generation_mpi import newGeneration
import random
from kulfan import Kulfan
import numpy as np
import subprocess
import time
import os
import sys
import copy

import pathlib
path_to_here = pathlib.Path(__file__).parent.resolve()

from mpi4py import MPI
comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

def cprint(x):
    sys.stdout.flush()
    print(x)

# mpirun -n 12 python -m mpi4py run_ga_mpi.py

# tau = 0.15
# tau = 0.18
# tau = 0.21
# tau = 0.24
# tau = 0.27
# tau = 0.30
tau = 0.33
# tau = 0.36

case_number = 22

N_k = 8
N_pop = 260

if 'dcmania' in str(path_to_here):
    ldr = '/gpfs/dcmania/'
elif 'ahsieh' in str(path_to_here):
    ldr = '/gpfs/ahsieh/'
elif 'karch' in str(path_to_here):
    ldr = './'
else:
    # Default to David's file system
    ldr = '/gpfs/dcmania/'

te_gap_lookup = {
    '15':  0.00196,
    '18':  0.00230,
    '21':  0.00262,
    '24':  0.00751,
    '27':  0.01012,
    '30':  0.01828,
    '33':  0.02644,
    '36':  0.02896,
}

pop = None 

airfoil_seeds = [
    [0.4058752139415435, 0.7801704816157683, 0.6544095833277745, 0.20163986538580234, -0.2867799353624853, -0.16162838167172822, -0.33332858773028273, -0.044098692445526], 
    [0.4917048059555331, 0.9805023000926477, 0.450882343480732, 0.244908748466822, -0.25835723731246035, -0.09787615444738743, -0.08443806909098056, -0.1288534186033852], 
    [0.5231945705367956, 0.7120587742543819, 0.3001497038026565, 0.5836200725646785, -0.42852505795861034, -0.21513817806399502, -0.2746980095543485, 0.5647006410604389], 
    [0.4611586973746037, 1.0558738269170702, 0.29608407245546364, 0.2804930367764465, -0.29860899242455574, 0.02687850399117825, -0.45018839397691823, 0.27151439096357005], 
    [0.449419088188309, 0.709933661789311, 1.021855864387806, 0.6168294789264414, -0.15017724104262054, 0.06158026125465309, -0.4230314110836642, 0.09911898048103203], 
    [0.4204261176137495, 0.7946352211925586, 0.5178494341533861, 0.911549942590558, -0.17004274130430558, -0.4441064189670523, -0.015296774223018998, 0.5762338195091963], 
    [0.345600148324233, 0.7428247275547626, 0.41663111814384296, 0.39988891856982317, -0.27859663797254064, -0.31382292939118694, -0.3994279200691581, 0.0038749038181998667], 
    [0.40160392668147515, 0.7472562138792894, 0.43348919581128503, 0.27394937115870766, -0.24992881942439024, -0.3384757501023404, -0.3474692619347422, 0.1496892989895015], 
    [0.4255596100501975, 0.9893652655101443, 0.136724164825126, 0.3410529106561461, -0.24748654983432417, -0.32213543524932764, 0.012867370540446595, -0.09358514396671547], 
    [0.40124470257005856, 0.7438859596568135, 0.1963064788787148, 0.5171353917725251, -0.3290374156547659, -0.5180285903069555, 0.0019168058289555866, 0.3856846301232221], 
    [0.41017319806067776, 0.8278164666841759, 0.38904952727430725, 0.32073183191924354, -0.26374608889090895, -0.30160718457005936, -0.28969734932971003, 0.3495126969637518], 
    [0.39276384474163356, 0.6246176376083605, 0.9295915835059363, 0.7297856284406059, -0.1283265583499522, -0.09945877574981013, -0.5080476551143689, 0.3835587583383048], 
    [0.3661089731757664, 0.7114226259453624, 0.33425369887228623, 0.8249212369769884, -0.18957971317500524, -0.704660517441012, 0.15259321994874744, 0.40786790316563765], 
    [0.29469005898295997, 0.645375302804388, 0.34545266488192117, 0.38045189695748416, -0.24621008159668062, -0.5784096029643534, -0.2849875733287599, 0.15819124900623105], 
    [0.37626687473568465, 0.6499511287526338, 0.3120883930343349, 0.2878866089403231, -0.26847472210419326, -0.5536079371326612, -0.25066163749590076, 0.32077553516940877], 
    [0.3725978243019096, 0.8388725147532611, 0.13695174788143705, 0.2987469251563274, -0.26840510579733456, -0.4689907835209925, -0.09269250117762043, 0.033366747043119954], 
    [0.3942938717544786, 0.5868579487002288, 0.2433877936797085, 0.43725014655512506, -0.3564521946044188, -0.6480911350937909, 0.03549468583978128, 0.3346226927341784], 
    [0.3626787027168607, 0.7034820084092188, 0.3361447819244535, 0.2694182941676213, -0.2564142575337019, -0.5320247148152175, -0.2016811902248652, 0.2904031998059172], 
    [0.34471193446516635, 0.695793299102581, 0.5460326065764087, 0.7440274577228714, -0.11732376811971815, -0.39640606737441214, -0.43681782153572135, 0.5474650882493297], 
    [0.3051865383047664, 0.5687362114903972, 0.3458799875789421, 0.3768584327888095, -0.3736836587534647, -0.5091455158197749, -0.425865275014382, 0.426155148952523], 
    [0.3855870772117773, 0.5522790154520687, 0.29001239031957926, 0.30173409176341165, -0.33294329543847406, -0.5737631390260476, -0.294585017679269, 0.3332743341094036], 
    [0.32938688383785897, 0.7279679948925216, 0.11807220400606419, 0.29294917671273574, -0.2633080111241516, -0.5883377629068829, -0.21415098301289678, 0.20658213941282305], 
    [0.3877409814912288, 0.4676912205741795, 0.2740360505298943, 0.3938106014202247, -0.37370155870006005, -0.7682230294274868, 0.09101039258246524, 0.22875807031933984], 
    [0.3137314044883898, 0.6394602507212198, 0.3037627907563986, 0.35282180612922664, -0.2795134129563963, -0.588524017405076, -0.24883838025999985, 0.35639472430327995], 
    [0.3112291951671459, 0.628349715840807, 0.2315314830831515, 0.6366926607106996, -0.24024133423210906, -0.8000859012687335, 0.08125992478307627, 0.1482523274123235], 
    [0.28208256912929336, 0.5678163887150365, 0.2548381780236024, 0.5614455600872613, -0.3460641722550788, -0.832379621976112, 0.18929804256777844, 0.05995935221810882], 
    [0.3051865383047664, 0.5687362114903972, 0.3458799875789421, 0.3768584327888095, -0.3736836587534647, -0.5091455158197749, -0.425865275014382, 0.426155148952523], 
    [0.38600826188253984, 0.5209706040278776, 0.28173298729644186, 0.2875375520594969, -0.35684599480752394, -0.5794048732885927, -0.30979667177897313, 0.318534832164872], 
    [0.29659664526297547, 0.6665211712015584, 0.08312645520788198, 0.3709334219171904, -0.2711534311342846, -0.6533465658294549, -0.2907322979244261, 0.25558569374755996], 
    [0.28000752884612207, 0.5330564172736443, 0.2463092475752137, 0.532581309648498, -0.3669416751468568, -0.8330849369149808, 0.1313500943193163, 0.05721007910985275], 
    [0.30428157431132385, 0.4987296460408866, 0.23681844293605797, 0.3433031260245776, -0.33251678604668344, -0.7354937714460267, -0.179731001486591, 0.16056059888090438], 
    [0.43255295894846124, 0.46997033109864683, 0.2961935973493859, 0.2889942841045945, -0.3819102063065736, -0.5400638755234373, -0.33779819121874183, 0.2921247548522801], 
    [0.26712303358459394, 0.6108738326082471, 0.017122086404430074, 0.4017712609014968, -0.2787456308229398, -0.7955282048762329, -0.1972338280506892, 0.284048938715996], 
    [0.4281431169717134, 0.46329867537527625, 0.24775292014311437, 0.29121313960275924, -0.4431708560477731, -0.48200627967982906, -0.40188654784628225, 0.2843327880576095], 
    [0.4732931489184696, 0.4356646849878427, 0.2931197029039305, 0.2831230166263515, -0.4913437057615357, -0.3858930864184949, -0.47128180957598326, 0.31843856942442506], 
    [0.3802108135943989, 0.43553099293918623, 0.22943665348120051, 0.3033884455740155, -0.33156338108852, -0.8419320780240825, 0.031709492139574996, 0.17658960844623434], 
]

if N_pop < len(airfoil_seeds):
    raise ValueError("Length of Population must be greater than the length of the seed population")

if N_k < 4:
    raise ValueError("Must use at least 2 design variables top and bottom")

if rank == 0:
    pop = airfoil_seeds 
    for i in range(0,N_pop-len(pop)): 
        pop += [[random.uniform(0.1,0.8)] + [random.uniform(-0.1,0.8) for j in range(0,int(N_k/2)-1)]   +   [random.uniform(-0.8,-0.1)] + [random.uniform(-0.8,0.1) for j in range(0,int(N_k/2)-1)] ] 

    for i,p in enumerate(pop):
        afl = Kulfan(TE_gap = te_gap_lookup[str(int(100*tau))])
        # afl = Kulfan(TE_gap = 0)
        K = p
        Ku = K[0:int(len(K)/2)]
        Kl = K[int(len(K)/2):]
        afl.upperCoefficients = Ku
        afl.lowerCoefficients = Kl
        afl.scaleThickness(tau)
        pop[i] = afl.upperCoefficients.magnitude.tolist() + afl.lowerCoefficients.magnitude.tolist()

pop = comm.bcast(pop, root=0)
pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=True, comm=comm)
pop = comm.bcast(pop, root=0)

if rank == 0:
    datestr = time.strftime("%d_%b_%Y_%H-%M", time.localtime())
    folderstr = datestr + '__tau_%d'%(100*tau) + '__case_%d'%(case_number)
    # ldr = '/gpfs/cjkarch/'
    if not os.path.isdir(ldr + folderstr):
        os.mkdir(ldr + folderstr) 
    np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g0.txt'%(int(100*tau),N_k,N_pop),np.array(pop))
    # save population

for i in range(0,200):
    if rank == 0:
        cprint('Generation %d'%(i))
        pop_cache = copy.deepcopy(pop)
    pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=False, comm=comm)
    pop = comm.bcast(pop, root=0)
    if rank == 0:
        if len(pop) == 0:
            pop = pop_cache
            pop = comm.bcast(pop, root=0)
        cprint(pop)
        np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g%d.txt'%(int(100*tau),N_k,N_pop,i),np.array(pop))
        # save population
