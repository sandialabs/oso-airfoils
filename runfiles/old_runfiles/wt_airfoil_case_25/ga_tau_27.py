# from wt_objective_fast import airfoil_fitness
# from wt_objective_updated import airfoil_fitness

from wt_objective_equal import airfoil_fitness
# from wt_objective_4_1 import airfoil_fitness
# from wt_objective_fullRough import airfoil_fitness
# from wt_objective_equal_12 import airfoil_fitness
# from wt_objective_4_1_12 import airfoil_fitness
# from wt_objective_fullRough_12 import airfoil_fitness
# from wt_objective_equal_14 import airfoil_fitness
# from wt_objective_4_1_14 import airfoil_fitness
# from wt_objective_fullRough_14 import airfoil_fitness
# from wt_objective_4_1_mingap import airfoil_fitness

from ga_new_generation_mpi import newGeneration
import random
from kulfan import Kulfan
import numpy as np
import subprocess
import time
import os
import sys
import copy

import pathlib
path_to_here = pathlib.Path(__file__).parent.resolve()

from mpi4py import MPI
comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

def cprint(x):
    sys.stdout.flush()
    print(x)

# mpirun -n 12 python -m mpi4py run_ga_mpi.py

# tau = 0.15
# tau = 0.18
# tau = 0.21
# tau = 0.24
tau = 0.27
# tau = 0.30
# tau = 0.33
# tau = 0.36

case_number = 25

N_k = 8
N_pop = 260

if 'dcmania' in str(path_to_here):
    ldr = '/gpfs/dcmania/'
elif 'ahsieh' in str(path_to_here):
    ldr = '/gpfs/ahsieh/'
elif 'karch' in str(path_to_here):
    ldr = './'
else:
    # Default to David's file system
    ldr = '/gpfs/dcmania/'

te_gap_lookup = {
    '15':  0.00196,
    '18':  0.00230,
    '21':  0.00262,
    '24':  0.00751,
    '27':  0.01012,
    '30':  0.01828,
    '33':  0.02644,
    '36':  0.02896,
}

pop = None 

airfoil_seeds = [
    [0.3320797204976266, 0.6383213031401741, 0.5354260227227248, 0.16497807167929285, -0.23463812893294259, -0.13224140318595948, -0.2727233899611405, -0.03608074836452128], 
    [0.4023039321454362, 0.8022291546212572, 0.36890373557514433, 0.200379885109218, -0.21138319416474027, -0.0800804900024079, -0.06908569289262045, -0.10542552431186063], 
    [0.42806828498465094, 0.582593542571767, 0.2455770303839917, 0.47750733209837337, -0.35061141105704485, -0.1760221456887232, -0.2247529169081033, 0.4620277972312682], 
    [0.3773116614883121, 0.8638967674776029, 0.24225060473628846, 0.2294943028170926, -0.24431644834736377, 0.021991503265509478, -0.3683359587083876, 0.22214813806110278], 
    [0.3677065266995255, 0.5808548141912545, 0.8360638890445684, 0.5046786645761793, -0.12287228812578044, 0.05038385011744344, -0.34611660906845254, 0.08109734766629893], 
    [0.34398500532034054, 0.6501560900666389, 0.4236949915800433, 0.7458135893922748, -0.13912587924897732, -0.36335979733667917, -0.012515542546106456, 0.47146403414388793], 
    [0.28276375771982704, 0.6077656861811694, 0.34088000575405336, 0.32718184246621895, -0.22794270379571507, -0.25676421495642565, -0.3268046618747657, 0.0031703758512544363], 
    [0.328585030921207, 0.6113914477194187, 0.35467297839105144, 0.22414039458439722, -0.20448721589268293, -0.2769347046291876, -0.28429303249206184, 0.12247306280959215], 
    [0.34818513549561614, 0.8094806717810272, 0.1118652257660122, 0.2790432905368468, -0.2024889953189925, -0.26356535611308624, 0.010527848624001761, -0.07656966324549448], 
    [0.32829112028459334, 0.6086339669919383, 0.16061439180985754, 0.42311077508661143, -0.269212430990263, -0.423841573887509, 0.0015682956782363889, 0.3155601519189999], 
    [0.3355962529587364, 0.6773043818325076, 0.31831324958806956, 0.262416953388472, -0.21579225454710735, -0.2467695146482304, -0.23702510399703552, 0.28596493387943334], 
    [0.3213522366067911, 0.5110507944068404, 0.7605749319594024, 0.5970973323604957, -0.10499445683177909, -0.08137536197711738, -0.4156753541844836, 0.3138208022767948], 
    [0.2995437053256271, 0.5820730575916602, 0.2734802990773251, 0.6749355575266268, -0.1551106744159134, -0.576540423360828, 0.12484899813988426, 0.3337101025900671], 
    [0.24111004825878543, 0.5280343386581356, 0.28264308944884453, 0.3112788247833961, -0.20144461221546595, -0.4732442206071982, -0.233171650905349, 0.12942920373237085], 
    [0.3078547156928329, 0.5317781962521549, 0.255345048846274, 0.2355435891329916, -0.21966113626706724, -0.4529519485630865, -0.2050867943148279, 0.2624527105931526], 
    [0.304852765337926, 0.6863502393435772, 0.11205143008481214, 0.2444293024006315, -0.21960417747054645, -0.3837197319717211, -0.0758393191453258, 0.02730006576255269], 
    [0.32260407689002796, 0.48015650348200534, 0.19913546755612513, 0.3577501199087387, -0.2916427046763427, -0.5302563832585562, 0.029041106596184682, 0.27378220314614593], 
    [0.2967371204047042, 0.5755761886984517, 0.2750275488472801, 0.22043314977350834, -0.20979348343666518, -0.4352929484851779, -0.16501188291125332, 0.23760261802302315], 
    [0.28203703728968155, 0.5692854265384754, 0.4467539508352435, 0.6087497381368947, -0.09599217391613303, -0.32433223694270086, -0.35739639943831747, 0.4479259812949062], 
    [0.2496980767948089, 0.4653296275830523, 0.2829927171100436, 0.30833871773629873, -0.3057411753437439, -0.4165736038525431, -0.3484352250117671, 0.34867239459751886], 
    [0.31548033590054514, 0.4518646490062381, 0.23728286480692853, 0.24687334780642775, -0.272408150813297, -0.46944256829403896, -0.2410241053739474, 0.2726790006349666], 
    [0.26949835950370277, 0.5956101776393359, 0.09660453055041616, 0.23968569003769286, -0.21543382728339677, -0.4813672605601769, -0.17521444064691558, 0.16902175042867343], 
    [0.31724262122009633, 0.382656453197056, 0.22421131406991354, 0.32220867388927477, -0.3057558207545946, -0.6285461149861256, 0.07446304847656246, 0.1871656938976417], 
    [0.2566893309450462, 0.5231947505900889, 0.24853319243705338, 0.2886723868330036, -0.2286927924188697, -0.4815196506041531, -0.2035950383945453, 0.2915956835208654], 
    [0.2546420687731194, 0.5141043129606603, 0.18943484979530575, 0.5209303587632996, -0.19656109164445285, -0.654615737401691, 0.06648539300433512, 0.12129735879190104], 
    [0.23079482928760367, 0.4645770453123026, 0.2085039638374929, 0.45936454916230474, -0.2831434136632463, -0.6810378725259099, 0.15488021664636417, 0.04905765181481631], 
    [0.2496980767948089, 0.4653296275830523, 0.2829927171100436, 0.30833871773629873, -0.3057411753437439, -0.4165736038525431, -0.3484352250117671, 0.34867239459751886], 
    [0.31582494154025986, 0.426248676022809, 0.23050880778799787, 0.23525799713958837, -0.2919649048425196, -0.4740585326906668, -0.2534700041827962, 0.26061940813489526], 
    [0.242669982487889, 0.545335503710366, 0.06801255426099434, 0.3034909815686103, -0.22185280729168738, -0.5345562811331904, -0.237871880119985, 0.20911556761163996], 
    [0.22909706905591806, 0.43613706867843627, 0.20152574801608392, 0.435748344257862, -0.3002250069383374, -0.6816149483849843, 0.10746825898853152, 0.04680824654442498], 
    [0.24895765170926498, 0.4080515285789072, 0.19376054422041106, 0.28088437583829073, -0.2720591885836501, -0.6017676311831127, -0.14705263757993806, 0.13136776272073994], 
    [0.3539069664123774, 0.384521179989802, 0.24234021601313394, 0.23644986881285007, -0.31247198697810563, -0.44187044361008504, -0.2763803382698797, 0.23901116306095646], 
    [0.21855520929648597, 0.49980586304311136, 0.014008979785442788, 0.3287219407375883, -0.22806460703695078, -0.6508867130805542, -0.161373132041473, 0.2324036771312695], 
    [0.3502989138859474, 0.3790625525797715, 0.20270693466254813, 0.23826529603862123, -0.3625943367663599, -0.39436877428349654, -0.32881626641968553, 0.2326359175016805], 
    [0.38723984911511145, 0.35645292408096224, 0.23982521146685223, 0.23164610451246936, -0.40200848653216553, -0.31573070706967765, -0.3855942078348954, 0.2605406477108932], 
    [0.3110815747590536, 0.356343539677516, 0.1877208983028004, 0.2482269100151036, -0.2712791299815164, -0.6888535183833402, 0.025944129932379545, 0.14448240691055536], 
]

if N_pop < len(airfoil_seeds):
    raise ValueError("Length of Population must be greater than the length of the seed population")

if N_k < 4:
    raise ValueError("Must use at least 2 design variables top and bottom")

if rank == 0:
    pop = airfoil_seeds 
    for i in range(0,N_pop-len(pop)): 
        pop += [[random.uniform(0.1,0.8)] + [random.uniform(-0.1,0.8) for j in range(0,int(N_k/2)-1)]   +   [random.uniform(-0.8,-0.1)] + [random.uniform(-0.8,0.1) for j in range(0,int(N_k/2)-1)] ] 

    for i,p in enumerate(pop):
        afl = Kulfan(TE_gap = te_gap_lookup[str(int(100*tau))])
        # afl = Kulfan(TE_gap = 0)
        K = p
        Ku = K[0:int(len(K)/2)]
        Kl = K[int(len(K)/2):]
        afl.upperCoefficients = Ku
        afl.lowerCoefficients = Kl
        afl.scaleThickness(tau)
        pop[i] = afl.upperCoefficients.magnitude.tolist() + afl.lowerCoefficients.magnitude.tolist()

pop = comm.bcast(pop, root=0)
pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=True, comm=comm)
pop = comm.bcast(pop, root=0)

if rank == 0:
    datestr = time.strftime("%d_%b_%Y_%H-%M", time.localtime())
    folderstr = datestr + '__tau_%d'%(100*tau) + '__case_%d'%(case_number)
    # ldr = '/gpfs/cjkarch/'
    if not os.path.isdir(ldr + folderstr):
        os.mkdir(ldr + folderstr) 
    np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g0.txt'%(int(100*tau),N_k,N_pop),np.array(pop))
    # save population

for i in range(0,200):
    if rank == 0:
        cprint('Generation %d'%(i))
        pop_cache = copy.deepcopy(pop)
    pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=False, comm=comm)
    pop = comm.bcast(pop, root=0)
    if rank == 0:
        if len(pop) == 0:
            pop = pop_cache
            pop = comm.bcast(pop, root=0)
        cprint(pop)
        np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g%d.txt'%(int(100*tau),N_k,N_pop,i),np.array(pop))
        # save population
