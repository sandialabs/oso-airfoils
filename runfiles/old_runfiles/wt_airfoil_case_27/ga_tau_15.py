# from wt_objective_fast import airfoil_fitness
# from wt_objective_updated import airfoil_fitness

# from wt_objective_equal import airfoil_fitness
# from wt_objective_4_1 import airfoil_fitness
from wt_objective_fullRough import airfoil_fitness
# from wt_objective_equal_12 import airfoil_fitness
# from wt_objective_4_1_12 import airfoil_fitness
# from wt_objective_fullRough_12 import airfoil_fitness
# from wt_objective_equal_14 import airfoil_fitness
# from wt_objective_4_1_14 import airfoil_fitness
# from wt_objective_fullRough_14 import airfoil_fitness
# from wt_objective_4_1_mingap import airfoil_fitness

from ga_new_generation_mpi import newGeneration
import random
from kulfan import Kulfan
import numpy as np
import subprocess
import time
import os
import sys
import copy

import pathlib
path_to_here = pathlib.Path(__file__).parent.resolve()

from mpi4py import MPI
comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

def cprint(x):
    sys.stdout.flush()
    print(x)

# mpirun -n 12 python -m mpi4py run_ga_mpi.py

tau = 0.15
# tau = 0.18
# tau = 0.21
# tau = 0.24
# tau = 0.27
# tau = 0.30
# tau = 0.33
# tau = 0.36

case_number = 27

N_k = 8
N_pop = 260

if 'dcmania' in str(path_to_here):
    ldr = '/gpfs/dcmania/'
elif 'ahsieh' in str(path_to_here):
    ldr = '/gpfs/ahsieh/'
elif 'karch' in str(path_to_here):
    ldr = './'
else:
    # Default to David's file system
    ldr = '/gpfs/dcmania/'

te_gap_lookup = {
    '15':  0.00196,
    '18':  0.00230,
    '21':  0.00262,
    '24':  0.00751,
    '27':  0.01012,
    '30':  0.01828,
    '33':  0.02644,
    '36':  0.02896,
}

pop = None 

airfoil_seeds = [
    [0.1844887336097925, 0.3546229461889856, 0.29745890151262483, 0.09165448426627379, -0.13035451607385698, -0.07346744621442192, -0.1515129944228558, -0.020044860202511817], 
    [0.22350218452524231, 0.4456828636784762, 0.20494651976396908, 0.11132215839401, -0.11743510786930014, -0.04448916111244883, -0.038380940495900254, -0.05856973572881145], 
    [0.2378157138803616, 0.3236630792065372, 0.13643168354666202, 0.2652818511657629, -0.19478411725391376, -0.09779008093817955, -0.12486273161561293, 0.25668210957292675], 
    [0.20961758971572889, 0.4799426485986682, 0.134583669297938, 0.12749683489838476, -0.13573136019297985, 0.012217501814171928, -0.20463108817132641, 0.12341563225616818], 
    [0.20428140372195863, 0.32269711899514136, 0.46447993835809354, 0.28037703587565516, -0.06826238229210023, 0.02799102784302413, -0.19228700503802917, 0.04505408203683274], 
    [0.1911027807335225, 0.3611978278147993, 0.23538610643335733, 0.41434088299570815, -0.07729215513832072, -0.20186655407593285, -0.006953079192281363, 0.261924463413271], 
    [0.157090976511015, 0.3376476034339829, 0.18937778097447405, 0.18176769025901052, -0.12663483544206391, -0.14264678608690312, -0.18155814548598093, 0.0017613199173635754], 
    [0.18254723940067052, 0.339661915399677, 0.1970405435505841, 0.12452244143577622, -0.11360400882926829, -0.153852613682882, -0.157940573606701, 0.06804059044977341], 
    [0.1934361863864534, 0.4497114843227929, 0.06214734764778455, 0.15502405029824823, -0.11249388628832917, -0.14642519784060345, 0.005848804791112089, -0.042538701803052484], 
    [0.18238395571366298, 0.3381299816621879, 0.08923021767214308, 0.2350615417147841, -0.14956246166125722, -0.23546754104861609, 0.0008712753767979939, 0.1753111955105555], 
    [0.1864423627548535, 0.37628021212917084, 0.1768406942155942, 0.14578719632692885, -0.11988458585950407, -0.13709417480457242, -0.13168061333168637, 0.15886940771079627], 
    [0.17852902033710616, 0.2839171080038002, 0.4225416288663346, 0.33172074020027537, -0.05833025379543282, -0.045208534431731874, -0.2309307523247131, 0.17434489015377488], 
    [0.16641316962534836, 0.3233739208842556, 0.1519334994874028, 0.37496419862590374, -0.08617259689772964, -0.32030023520045997, 0.06936055452215792, 0.18539450143892616], 
    [0.13395002681043633, 0.29335241036563087, 0.1570239385826914, 0.17293268043522003, -0.11191367345303663, -0.26291345589288784, -0.1295398060585272, 0.07190511318465045], 
    [0.17103039760712935, 0.29543233125119717, 0.14185836047015218, 0.13085754951832865, -0.12203396459281511, -0.2516399714239369, -0.11393710795268215, 0.14580706144064032], 
    [0.16936264740995888, 0.3813056885242095, 0.06225079449156229, 0.1357940568892397, -0.12200232081697023, -0.21317762887317837, -0.04213295508073655, 0.01516670320141816], 
    [0.17922448716112663, 0.2667536130455585, 0.1106308153089584, 0.19875006661596592, -0.16202372482019037, -0.2945868795880867, 0.016133948108991488, 0.15210122397008108], 
    [0.1648539557803912, 0.3197645492769176, 0.1527930826929334, 0.1224628609852824, -0.11655193524259176, -0.24182941582509884, -0.09167326828402962, 0.13200145445723507], 
    [0.15668724293871195, 0.31626968141026407, 0.24819663935291303, 0.3381942989649415, -0.05332898550896279, -0.18018457607927824, -0.19855355524350968, 0.24884776738605896], 
    [0.13872115377489383, 0.25851645976836235, 0.15721817617224643, 0.17129928763127705, -0.16985620852430214, -0.23142977991807948, -0.19357512500653729, 0.19370688588751048], 
    [0.17526685327808061, 0.2510359161145767, 0.13182381378162694, 0.13715185989245984, -0.15133786156294277, -0.2608014268300216, -0.1339022807633041, 0.15148833368609255], 
    [0.1497213108353904, 0.3308945431329643, 0.05366918363912008, 0.13315871668760712, -0.11968545960188708, -0.2674262558667649, -0.09734135591495308, 0.0939009724603741], 
    [0.17624590067783127, 0.21258691844280886, 0.12456184114995195, 0.17900481882737485, -0.16986434486366367, -0.3491922861034031, 0.041368360264756925, 0.10398094105424538], 
    [0.142605183858359, 0.29066375032782715, 0.138073995798363, 0.16037354824055755, -0.1270515513438165, -0.2675109170023072, -0.11310835466363628, 0.16199760195603632], 
    [0.14146781598506633, 0.2856135072003668, 0.10524158321961431, 0.2894057548684998, -0.10920060646914047, -0.3636754096676061, 0.03693632944685284, 0.06738742155105613], 
    [0.12821934960422424, 0.25809835850683477, 0.11583553546527382, 0.2552025273123915, -0.15730189647958126, -0.37835437362550545, 0.08604456480353564, 0.027254251008231284], 
    [0.13872115377489383, 0.25851645976836235, 0.15721817617224643, 0.17129928763127705, -0.16985620852430214, -0.23142977991807948, -0.19357512500653729, 0.19370688588751048], 
    [0.1754583008556999, 0.23680482001267167, 0.12806044877110995, 0.1306988872997713, -0.16220272491251086, -0.2633658514948149, -0.14081666899044235, 0.1447885600749418], 
    [0.1348166569377161, 0.30296416872798104, 0.03778475236721907, 0.16860610087145014, -0.12325155960649295, -0.2969757117406613, -0.13215104451110277, 0.11617531533979995], 
    [0.12727614947551003, 0.24229837148802014, 0.1119587488978244, 0.24208241347659, -0.16679167052129856, -0.3786749713249913, 0.05970458832696195, 0.026004581413569434], 
    [0.1383098065051472, 0.22669529365494842, 0.10764474678911724, 0.15604687546571705, -0.15114399365758338, -0.3343153506572848, -0.08169590976663225, 0.07298209040041106], 
    [0.19661498134020963, 0.2136228777721122, 0.13463345334062995, 0.13136103822936113, -0.1735955483211698, -0.24548357978338053, -0.15354463237215538, 0.13278397947830914], 
    [0.12141956072026996, 0.2776699239128396, 0.007782766547468215, 0.18262330040977126, -0.12670255946497264, -0.3616037294891968, -0.08965174002304055, 0.12911315396181636], 
    [0.1946105077144152, 0.2105903069887619, 0.11261496370141562, 0.1323696089103451, -0.20144129820353324, -0.2190937634908314, -0.18267570356649193, 0.1292421763898225], 
    [0.2151332495083952, 0.19802940226720123, 0.13323622859269565, 0.1286922802847052, -0.22333804807342528, -0.1754059483720431, -0.21421900435271965, 0.14474480428382955], 
    [0.1728230970883631, 0.19796863315417554, 0.10428938794600022, 0.13790383889727978, -0.15071062776750907, -0.38269639910185566, 0.014413405517988635, 0.08026800383919741], 
]

if N_pop < len(airfoil_seeds):
    raise ValueError("Length of Population must be greater than the length of the seed population")

if N_k < 4:
    raise ValueError("Must use at least 2 design variables top and bottom")

if rank == 0:
    pop = airfoil_seeds 
    for i in range(0,N_pop-len(pop)): 
        pop += [[random.uniform(0.1,0.8)] + [random.uniform(-0.1,0.8) for j in range(0,int(N_k/2)-1)]   +   [random.uniform(-0.8,-0.1)] + [random.uniform(-0.8,0.1) for j in range(0,int(N_k/2)-1)] ] 

    for i,p in enumerate(pop):
        afl = Kulfan(TE_gap = te_gap_lookup[str(int(100*tau))])
        # afl = Kulfan(TE_gap = 0)
        K = p
        Ku = K[0:int(len(K)/2)]
        Kl = K[int(len(K)/2):]
        afl.upperCoefficients = Ku
        afl.lowerCoefficients = Kl
        afl.scaleThickness(tau)
        pop[i] = afl.upperCoefficients.magnitude.tolist() + afl.lowerCoefficients.magnitude.tolist()

pop = comm.bcast(pop, root=0)
pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=True, comm=comm)
pop = comm.bcast(pop, root=0)

if rank == 0:
    datestr = time.strftime("%d_%b_%Y_%H-%M", time.localtime())
    folderstr = datestr + '__tau_%d'%(100*tau) + '__case_%d'%(case_number)
    # ldr = '/gpfs/cjkarch/'
    if not os.path.isdir(ldr + folderstr):
        os.mkdir(ldr + folderstr) 
    np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g0.txt'%(int(100*tau),N_k,N_pop),np.array(pop))
    # save population

for i in range(0,200):
    if rank == 0:
        cprint('Generation %d'%(i))
        pop_cache = copy.deepcopy(pop)
    pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=False, comm=comm)
    pop = comm.bcast(pop, root=0)
    if rank == 0:
        if len(pop) == 0:
            pop = pop_cache
            pop = comm.bcast(pop, root=0)
        cprint(pop)
        np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g%d.txt'%(int(100*tau),N_k,N_pop,i),np.array(pop))
        # save population
