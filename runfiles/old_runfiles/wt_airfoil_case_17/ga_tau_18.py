# from wt_objective_fast import airfoil_fitness
# from wt_objective_updated import airfoil_fitness

# from wt_objective_equal import airfoil_fitness
# from wt_objective_4_1 import airfoil_fitness
# from wt_objective_fullRough import airfoil_fitness
# from wt_objective_equal_12 import airfoil_fitness
# from wt_objective_4_1_12 import airfoil_fitness
from wt_objective_fullRough_12 import airfoil_fitness
# from wt_objective_equal_14 import airfoil_fitness
# from wt_objective_4_1_14 import airfoil_fitness
# from wt_objective_fullRough_14 import airfoil_fitness
# from wt_objective_4_1_mingap import airfoil_fitness

from ga_new_generation_mpi import newGeneration
import random
from kulfan import Kulfan
import numpy as np
import subprocess
import time
import os
import sys
import copy

import pathlib
path_to_here = pathlib.Path(__file__).parent.resolve()

from mpi4py import MPI
comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

def cprint(x):
    sys.stdout.flush()
    print(x)

# mpirun -n 12 python -m mpi4py run_ga_mpi.py

# tau = 0.15
tau = 0.18
# tau = 0.21
# tau = 0.24
# tau = 0.27
# tau = 0.30
# tau = 0.33
# tau = 0.36

case_number = 17

N_k = 8
N_pop = 260

if 'dcmania' in str(path_to_here):
    ldr = '/gpfs/dcmania/'
elif 'ahsieh' in str(path_to_here):
    ldr = '/gpfs/ahsieh/'
elif 'karch' in str(path_to_here):
    ldr = './'
else:
    # Default to David's file system
    ldr = '/gpfs/dcmania/'

te_gap_lookup = {
    '15':  0.00196,
    '18':  0.00230,
    '21':  0.00262,
    '24':  0.00751,
    '27':  0.01012,
    '30':  0.01828,
    '33':  0.02644,
    '36':  0.02896,
}

pop = None 

airfoil_seeds = [
    [0.221386480331751, 0.4255475354267827, 0.3569506818151498, 0.10998538111952855, -0.15642541928862835, -0.0881609354573063, -0.18181559330742694, -0.024053832243014182], 
    [0.2682026214302908, 0.5348194364141714, 0.24593582371676287, 0.13358659007281198, -0.14092212944316015, -0.05338699333493859, -0.0460571285950803, -0.07028368287457375], 
    [0.2853788566564339, 0.38839569504784466, 0.16371802025599444, 0.31833822139891554, -0.23374094070469653, -0.11734809712581545, -0.14983527793873552, 0.3080185314875121], 
    [0.25154110765887466, 0.5759311783184019, 0.16150040315752562, 0.1529962018780617, -0.16287763223157584, 0.014661002177006315, -0.2455573058055917, 0.14809875870740183], 
    [0.24513768446635031, 0.38723654279416964, 0.5573759260297122, 0.33645244305078614, -0.08191485875052028, 0.03358923341162895, -0.230744406045635, 0.05406489844419928], 
    [0.229323336880227, 0.4334373933777592, 0.28246332772002886, 0.49720905959484984, -0.09275058616598486, -0.24223986489111943, -0.008343695030737636, 0.31430935609592525], 
    [0.188509171813218, 0.40517712412077955, 0.22725333716936888, 0.21812122831081263, -0.1519618025304767, -0.17117614330428377, -0.21786977458317713, 0.0021135839008362906], 
    [0.21905668728080463, 0.40759429847961237, 0.23644865226070091, 0.14942692972293145, -0.13632481059512194, -0.18462313641945838, -0.18952868832804118, 0.0816487085397281], 
    [0.23212342366374406, 0.5396537811873514, 0.07457681717734145, 0.18602886035789784, -0.13499266354599498, -0.17571023740872413, 0.007018565749334506, -0.051046442163662976], 
    [0.21886074685639556, 0.4057559779946255, 0.1070762612065717, 0.28207385005774094, -0.17947495399350866, -0.2825610492583393, 0.0010455304521575926, 0.21037343461266658], 
    [0.22373083530582422, 0.45153625455500507, 0.21220883305871302, 0.17494463559231466, -0.14386150303140488, -0.1645130097654869, -0.15801673599802366, 0.19064328925295554], 
    [0.21423482440452737, 0.3407005296045602, 0.5070499546396016, 0.39806488824033043, -0.06999630455451938, -0.05425024131807824, -0.2771169027896557, 0.20921386818452986], 
    [0.19969580355041802, 0.38804870506110667, 0.18232019938488336, 0.4499570383510845, -0.10340711627727557, -0.3843602822405519, 0.0832326654265895, 0.2224734017267114], 
    [0.1607400321725236, 0.35202289243875706, 0.18842872629922972, 0.20751921652226407, -0.13429640814364396, -0.31549614707146545, -0.15544776727023266, 0.08628613582158057], 
    [0.20523647712855522, 0.3545187975014366, 0.17023003256418265, 0.15702905942199438, -0.14644075751137814, -0.3019679657087243, -0.13672452954321856, 0.1749684737287684], 
    [0.20323517689195067, 0.4575668262290514, 0.07470095338987474, 0.16295286826708766, -0.14640278498036427, -0.25581315464781407, -0.05055954609688386, 0.018200043841701794], 
    [0.21506938459335195, 0.32010433565467017, 0.13275697837075007, 0.23850007993915912, -0.19442846978422842, -0.3535042555057041, 0.019360737730789786, 0.18252146876409728], 
    [0.19782474693646943, 0.38371745913230115, 0.18335169923152006, 0.1469554331823389, -0.13986232229111012, -0.2901952989901186, -0.11000792194083554, 0.1584017453486821], 
    [0.18802469152645435, 0.3795236176923169, 0.29783596722349565, 0.4058331587579298, -0.06399478261075535, -0.21622149129513388, -0.23826426629221162, 0.29861732086327075], 
    [0.16646538452987258, 0.3102197517220348, 0.18866181140669572, 0.20555914515753243, -0.20382745022916254, -0.27771573590169535, -0.2322901500078447, 0.23244826306501254], 
    [0.2103202239336967, 0.301243099337492, 0.15818857653795232, 0.1645822318709518, -0.18160543387553132, -0.3129617121960259, -0.1606827369159649, 0.18178600042331103], 
    [0.1796655730024685, 0.39707345175955716, 0.06440302036694409, 0.15979046002512853, -0.1436225515222645, -0.3209115070401179, -0.11680962709794368, 0.11268116695244892], 
    [0.21149508081339752, 0.25510430213137064, 0.14947420937994235, 0.21480578259284983, -0.20383721383639639, -0.4190307433240837, 0.04964203231770831, 0.12477712926509445], 
    [0.17112622063003077, 0.3487965003933926, 0.16568879495803557, 0.19244825788866907, -0.15246186161257977, -0.32101310040276865, -0.13573002559636352, 0.19439712234724357], 
    [0.1697613791820796, 0.3427362086404402, 0.12628989986353717, 0.3472869058421998, -0.13104072776296857, -0.4364104916011273, 0.04432359533622342, 0.08086490586126736], 
    [0.1538632195250691, 0.3097180302082017, 0.1390026425583286, 0.3062430327748698, -0.1887622757754975, -0.45402524835060654, 0.10325347776424278, 0.03270510120987754], 
    [0.16646538452987258, 0.3102197517220348, 0.18866181140669572, 0.20555914515753243, -0.20382745022916254, -0.27771573590169535, -0.2322901500078447, 0.23244826306501254], 
    [0.2105499610268399, 0.28416578401520604, 0.15367253852533191, 0.15683866475972558, -0.19464326989501304, -0.31603902179377785, -0.16898000278853081, 0.17374627208993018], 
    [0.16177998832525933, 0.3635570024735773, 0.04534170284066289, 0.2023273210457402, -0.14790187152779155, -0.3563708540887936, -0.15858125341332333, 0.13941037840775997], 
    [0.15273137937061204, 0.29075804578562414, 0.13435049867738927, 0.290498896171908, -0.20015000462555826, -0.45440996558998953, 0.07164550599235434, 0.031205497696283318], 
    [0.16597176780617662, 0.27203435238593804, 0.1291736961469407, 0.18725625055886044, -0.1813727923891, -0.4011784207887417, -0.0980350917199587, 0.08757850848049327], 
    [0.23593797760825158, 0.25634745332653464, 0.16156014400875596, 0.15763324587523336, -0.20831465798540375, -0.2945802957400567, -0.18425355884658645, 0.15934077537397098], 
    [0.14570347286432395, 0.3332039086954075, 0.009339319856961858, 0.2191479604917255, -0.15204307135796716, -0.4339244753870361, -0.10758208802764865, 0.15493578475417963], 
    [0.2335326092572982, 0.2527083683865143, 0.13513795644169874, 0.15884353069241414, -0.24172955784423986, -0.26291251618899764, -0.21921084427979032, 0.15509061166778698], 
    [0.2581598994100743, 0.23763528272064147, 0.1598834743112348, 0.15443073634164622, -0.26800565768811035, -0.21048713804645175, -0.2570628052232636, 0.17369376514059545], 
    [0.20738771650603574, 0.23756235978501067, 0.12514726553520028, 0.16548460667673573, -0.1808527533210109, -0.45923567892222683, 0.01729608662158636, 0.0963216046070369], 
]

if N_pop < len(airfoil_seeds):
    raise ValueError("Length of Population must be greater than the length of the seed population")

if N_k < 4:
    raise ValueError("Must use at least 2 design variables top and bottom")

if rank == 0:
    pop = airfoil_seeds 
    for i in range(0,N_pop-len(pop)): 
        pop += [[random.uniform(0.1,0.8)] + [random.uniform(-0.1,0.8) for j in range(0,int(N_k/2)-1)]   +   [random.uniform(-0.8,-0.1)] + [random.uniform(-0.8,0.1) for j in range(0,int(N_k/2)-1)] ] 

    for i,p in enumerate(pop):
        afl = Kulfan(TE_gap = te_gap_lookup[str(int(100*tau))])
        # afl = Kulfan(TE_gap = 0)
        K = p
        Ku = K[0:int(len(K)/2)]
        Kl = K[int(len(K)/2):]
        afl.upperCoefficients = Ku
        afl.lowerCoefficients = Kl
        afl.scaleThickness(tau)
        pop[i] = afl.upperCoefficients.magnitude.tolist() + afl.lowerCoefficients.magnitude.tolist()

pop = comm.bcast(pop, root=0)
pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=True, comm=comm)
pop = comm.bcast(pop, root=0)

if rank == 0:
    datestr = time.strftime("%d_%b_%Y_%H-%M", time.localtime())
    folderstr = datestr + '__tau_%d'%(100*tau) + '__case_%d'%(case_number)
    # ldr = '/gpfs/cjkarch/'
    if not os.path.isdir(ldr + folderstr):
        os.mkdir(ldr + folderstr) 
    np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g0.txt'%(int(100*tau),N_k,N_pop),np.array(pop))
    # save population

for i in range(0,200):
    if rank == 0:
        cprint('Generation %d'%(i))
        pop_cache = copy.deepcopy(pop)
    pop = newGeneration(airfoil_fitness, pop, normalizationVector = [1]*N_k, encodingTypes=[float]*N_k, lowerBounds=[-2.0]*N_k, upperBounds=[2.0]*N_k, tau=tau, initalize=False, comm=comm)
    pop = comm.bcast(pop, root=0)
    if rank == 0:
        if len(pop) == 0:
            pop = pop_cache
            pop = comm.bcast(pop, root=0)
        cprint(pop)
        np.savetxt(ldr + folderstr + '/population_t%d_x%d_n%d_g%d.txt'%(int(100*tau),N_k,N_pop,i),np.array(pop))
        # save population
